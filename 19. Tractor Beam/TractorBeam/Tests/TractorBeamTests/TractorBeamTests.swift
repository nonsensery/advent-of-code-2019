import XCTest
@testable import TractorBeam

final class TractorBeamTests: XCTestCase {
    func testMockProgram() {
        let program = mockProgram(
            """
            #.........
            .#........
            ..##......
            ...###....
            ....###...
            .....####.
            ......####
            ......####
            .......###
            ........##
            """
        )

        let result = drawRegion(scanRegion(program: program, width: 10, height: 10))

        XCTAssertEqual(
            result,
            """
            #.........
            .#........
            ..##......
            ...###....
            ....###...
            .....####.
            ......####
            ......####
            .......###
            ........##
            """
        )
    }

    func testExample1() {
        let program = mockProgram(
            """
            #.........
            .#........
            ..##......
            ...###....
            ....###...
            .....####.
            ......####
            ......####
            .......###
            ........##
            """
        )

        let result = countPullingLocations(program: program, width: 10, height: 10)

        XCTAssertEqual(result, 27)
    }

    func testPart1() {
        let result = countPullingLocations(program: inputData, width: 50, height: 50)

        XCTAssertEqual(result, 201)
    }

    func testExample2() {
        let program = mockProgram(
            """
            #.......................................
            .#......................................
            ..##....................................
            ...###..................................
            ....###.................................
            .....####...............................
            ......#####.............................
            ......######............................
            .......#######..........................
            ........########........................
            .........#########......................
            ..........#########.....................
            ...........##########...................
            ...........############.................
            ............############................
            .............#############..............
            ..............##############............
            ...............###############..........
            ................###############.........
            ................#################.......
            .................########OOOOOOOOOO.....
            ..................#######OOOOOOOOOO#....
            ...................######OOOOOOOOOO###..
            ....................#####OOOOOOOOOO#####
            .....................####OOOOOOOOOO#####
            .....................####OOOOOOOOOO#####
            ......................###OOOOOOOOOO#####
            .......................##OOOOOOOOOO#####
            ........................#OOOOOOOOOO#####
            .........................OOOOOOOOOO#####
            ..........................##############
            ..........................##############
            ...........................#############
            ............................############
            .............................###########
            """
        )

        let result = findRegion(program: program, minWidth: 5, minHeight: 5)

        XCTAssertEqual(result, Location(x: 11, y: 9))
    }

    func testPart2_5x5() {
        let result = findRegion(program: inputData, minWidth: 5, minHeight: 5)

        XCTAssertEqual(result, Location(x: 29, y: 43))
    }

    func testPart2() {
        let result = findRegion(program: inputData, minWidth: 100, minHeight: 100)

        XCTAssertEqual(result, Location(x: 661, y: 984))
    }

    static var allTests = [
        ("testExample1", testExample1),
    ]
}

private func mockProgram(_ data: String) -> Intcomputer.Program {
    let dataStart = 200
    let w = data.firstIndex(of: "\n").map({ data.distance(from: data.startIndex, to: $0)})!

    let compiledData: [Int] = data.compactMap {
        switch $0 {
        case ".":
            return 0
        case "#", "O":
            return 1
        default:
            return nil
        }
    }

    var program =
        [
            3,100, // read 'x' => [100]
            3,101, // read 'y' => [101]
            1002,101,w,102, // multiply 'y' * 'w' => [102]
            1,100,102,103, // add [100] ('x') + [102] ('y' * 'w') => [103]
            9,103, // increase relative base by [103] ('x' + 'y' * 'w')
            204,dataStart, // output from 'dataStart' + 'relative base' ('x' + 'y' * 'w')
            99, // halt
        ]

    program.append(contentsOf: Array(repeating: 0, count: dataStart - program.count))
    program[dataStart - 1] = 999_999_999 // just a marker
    program.append(contentsOf: compiledData)

    return program
}

let inputData = [
    109,424,203,1,21102,1,11,0,1105,1,282,21101,18,0,0,1106,0,259,2101,0,1,221,203,1,21102,1,31,0,1106,0,282,21101,
    0,38,0,1106,0,259,21002,23,1,2,22102,1,1,3,21101,0,1,1,21102,57,1,0,1106,0,303,2102,1,1,222,21002,221,1,3,21002,
    221,1,2,21101,0,259,1,21101,0,80,0,1105,1,225,21101,123,0,2,21101,91,0,0,1105,1,303,1201,1,0,223,20101,0,222,4,
    21101,259,0,3,21102,225,1,2,21101,0,225,1,21102,118,1,0,1105,1,225,21001,222,0,3,21102,58,1,2,21101,133,0,0,
    1105,1,303,21202,1,-1,1,22001,223,1,1,21102,1,148,0,1106,0,259,1201,1,0,223,20101,0,221,4,21002,222,1,3,21101,
    20,0,2,1001,132,-2,224,1002,224,2,224,1001,224,3,224,1002,132,-1,132,1,224,132,224,21001,224,1,1,21101,195,0,0,
    105,1,109,20207,1,223,2,20102,1,23,1,21101,-1,0,3,21102,214,1,0,1105,1,303,22101,1,1,1,204,1,99,0,0,0,0,109,5,
    2101,0,-4,249,22102,1,-3,1,22102,1,-2,2,22101,0,-1,3,21101,250,0,0,1105,1,225,21202,1,1,-4,109,-5,2105,1,0,109,
    3,22107,0,-2,-1,21202,-1,2,-1,21201,-1,-1,-1,22202,-1,-2,-2,109,-3,2106,0,0,109,3,21207,-2,0,-1,1206,-1,294,104,
    0,99,21201,-2,0,-2,109,-3,2106,0,0,109,5,22207,-3,-4,-1,1206,-1,346,22201,-4,-3,-4,21202,-3,-1,-1,22201,-4,-1,2,
    21202,2,-1,-1,22201,-4,-1,1,22102,1,-2,3,21102,1,343,0,1105,1,303,1105,1,415,22207,-2,-3,-1,1206,-1,387,22201,
    -3,-2,-3,21202,-2,-1,-1,22201,-3,-1,3,21202,3,-1,-1,22201,-3,-1,2,21201,-4,0,1,21102,1,384,0,1106,0,303,1105,1,
    415,21202,-4,-1,-4,22201,-4,-3,-4,22202,-3,-2,-2,22202,-2,-4,-4,22202,-3,-2,-3,21202,-4,-1,-2,22201,-3,-2,1,21201,1,
    0,-4,109,-5,2105,1,0
]
